Go Ruby-AKL


Malcolm Lockyer
Auckland, NZ
segfault88@gmail.com
http://golang.org/

* A little about me

- Something like 4 years of doing Rails.
- Many other languages and technologies (Python, C++, Linux, SQL, Clojure etc.)
- Now work at Hapara doing Go full time.
- Hapara does tools for education on top of Google Drive.

I didn't have as much time as I wanted to put this together. Please forgive any mistakes or rough patches.

* Why should you care about Go?
.image gopher.jpg

Ruby is a really nice language with strong focus on developer happiness.

So why am I interested in Go?

* Motivation for Go

Started as an answer to software problems at Google:

- Multicore processors.
- Networked systems.
- Massive computation clusters.
- Scale: 10⁷ lines of code.
- Scale: 10³ programmers
- Scale: 10⁶⁺ machines (design point)

Originally built by people working at Google to solve Google type problems.

* The bad first

- You will write more code in Go.

* Why Go?

- Lightweight and easy to run. Compiles statically to native code with runtime included. You could ship your app by copying a single binary.
- "Batteries included" standard library of idiomatic Go code. Imperative, statically type-checked, with some type inference and other nice features.
- The type system is very well designed and gets out of your way. Simple and useful object model.
- Been designed with a relentless dedication to making things simple, easy to read and understand.
- Quick and easy to learn. It only contains 25 keywords (Python 3.5.0: 33, Ruby 2.2.0: 41, ANSI C: 32)
- It's safe despite appearing to be a much lower level than Ruby. Garbage collected, no pointer arithmetic, immune to array overruns etc.
- Been open source under a BSD license for 6 years, more than 400 contributors outside Google.

* Why Go? #2
- Concurrent to the core. Built around the CSP (communicating sequential processes), erlang or actor style of concurrency.
- Good tooling: go test is core, gofmt reformats your code (all go code looks the same, no religious wars over format), godoc, race detector, profiler and more.
- Compiles fast, tests fast, starts fast, executes efficiently. No make files or project files needed.
- *Great* documentation!

All of this makes Go extremely practical! It's not about programming language research, it's about making the creators programming lives easier.

* Composition

Go is Object Oriented, but not in the usual way.

- No classes (however methods may be declared on any struct).
- No subtype inheritance.
- Instead you compose types together. This is similar to using Modules in Ruby, but they don't get mixed into classes - they can just be used and composed.
- Interfaces are satisfied implicitly.

The result: simple pieces connected by small interfaces.

* Concurrency

- 'Goroutines' are a core language primitive.
- Very lightweight, segmented stacks mean each goroutine starts off as a few KB with a stack that grows if needed. Want millions of goroutines? No problem!
- Channels provide type safe and thread safe communication between goroutines, no need for locking/semaphores/etc.
- Higher order functions supported - channels of channels is no problem!

All of this means - no need for worker processes, or special techniques for many concurrent operations or callbacks. There are many reports of people easily running more than 1 million websockets per server.

* Do not communicate by sharing memory; instead, share memory by communicating.

* It's getting popular!

.image tweet.png

* Let's look at some code!

* Hello, go

.play hello_go.go

* Interfaces

The "Fprintf" function from the standard "fmt" library lets you write a formatted string. It can write to os.Stdout or a net connection. This is because a Fprintln writes to an io.Writer, and net.Conn is an io.Writer.

  fmt.Fprintf(c, "Hello %s!", "Ruby")
  fmt.Fprintf(os.Stdout, "Hello %s!", "Ruby")

  func Fprintf(w io.Writer, a ...interface{}) (n int, err error)

  type Writer interface {
      Write(p []byte) (n int, err error)
  }

  type Conn interface {
    Read(b []byte) (n int, err error)
    Write(b []byte) (n int, err error)
    Close() error
    // ... some additional methods omitted ...
  }


If a type defines all the methods of an interface, the type satisfies that interface.

* Go routines

.play goroutines.go

* Channels

- make a channel

  chan := make(chan int)

- send on the channel

  chan <- 5

- read from the channel

  value := <- chan

- read from a bunch of channels

  select {
  case <-a:
    // handle message from a
  case <-b:
    // handle message from b
  default:
    // no messages
  }

* Channel example

.play channel_example.go

* Chain of gophers

.image chain.jpg

Yes, this is a little bit silly.

* Chain of gophers

.play chain.go /START OMIT/,

* Let's take this to the web!

* Hello, web

.play hello_web.go

* Summary

In my opinion, Go has a roughly similar difficulty to writing code in Ruby with significantly better:
- Scalability - runtime performance and ability to easily handle massive load and concurrency.
- Resilience - type safety intelligently enforced by the compiler, immune to many mistakes compared to C/C++ and Ruby. No more waiting for your test suite to tell you about a typo.
- Readability - you write more code than you would in Ruby. However it is very simple and easy to understand code. 'goroutines' and channels make concurrent and parallel code easy to write and reason about. No callback 'spaghetti' needed. Just about no explicit locking/unlocking is needed. No worker processes or anything like that to worry about.

* Summary 2

Really nice tools and documentation.
- gofmt, and go vet enforces consistency in style, catches common silly mistakes.
- gocode and oracle are tools build on the core of Go to give things like code completion and location easily and accurately.

No monkey patching or 'magic' - it's always easy to understand where something is defined and how it's used.

Plus it's easy to learn! Just about any programmer can get 'up to speed' with Go extremely fast.

* Questions?
